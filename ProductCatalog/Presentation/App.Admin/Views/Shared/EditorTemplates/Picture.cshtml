@model int
@using App.Application.FrameWork
@inject App.Application.Interfaces.IAttachmentService pictureService
@{
    //other variables
    var random = CommonHelper.GenerateRandomInteger();
    var clientId = "picture" + random;
    var picture = await pictureService.GetPictureDataFromCache(Model);
    var extensions = ViewData["extensions"];
    if (extensions == null)
    {
        extensions = "'jpeg', 'jpg', 'gif', 'png','svg'";
    }
}
<link href="~/lastfineuploader/fine-uploader-new.css" rel="stylesheet" />
<script src="~/lastfineuploader/fine-uploader.js"></script>

<div id="@(clientId + "value")">
    @Html.HiddenFor(x => x)
</div>

<script type="text/template" id="@(clientId)-validation">
    <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="@Translate("DragFile").Text">
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>
        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
            <span class="qq-upload-drop-area-text-selector"></span>
        </div>
        <div class="qq-upload-button-selector qq-upload-button">
            <div>@Translate("ChooseFile").Text</div>
        </div>
        <span class="qq-drop-processing-selector qq-drop-processing">
            <span>@Translate("ProcessingFile").Text </span>
            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
        </span>
        <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
            <li>
                <div class="qq-progress-bar-container-selector">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
                <span class="qq-upload-file-selector qq-upload-file"></span>
                <span class="qq-upload-size-selector qq-upload-size"></span>
                <button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">@Translate("Cancel").Text</button>
                <button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">@Translate("TryAgain").Text</button>
                <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">@Translate("Delete").Text</button>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
            </li>
        </ul>

        <dialog class="qq-alert-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Translate("Close").Text</button>
            </div>
        </dialog>

        <dialog class="qq-confirm-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Translate("No").Text</button>
                <button type="button" class="qq-ok-button-selector">@Translate("Yes").Text</button>
            </div>
        </dialog>

        <dialog class="qq-prompt-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <input type="text">
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Translate("Cancel").Text</button>
                <button type="button" class="qq-ok-button-selector">@Translate("Ok").Text</button>
            </div>
        </dialog>
    </div>
</script>

<div id="@(clientId)-fine-uploader-validation"></div>

<script>

    var @(clientId)Uploader = new qq.FineUploader({
        element: document.getElementById("@(clientId)-fine-uploader-validation"),
        template: '@(clientId)-validation',
        request: {
            endpoint: '@(Url.Content("~/Common/AsyncUpload"))'
        },
        thumbnails: {
            placeholders: {
                waitingPath: '/lastfineuploader/placeholders/waiting-generic.png',
                notAvailablePath: '/lastfineuploader/placeholders/not_available-generic.png'
            }
        },
        deleteFile: {
            enabled: true,
            forceConfirm: true,
             method: 'POST',
             endpoint: '@(Url.Content("~/Common/DeleteFile"))'
        },
        multiple: false,
        callbacks: {
            onSubmitDelete: function (id) {
                var fileId = $("#@(clientId + "value") input").val();
                this.setDeleteFileParams({ fileId: fileId });
            },
            onDeleteComplete: function (id, xhr, isError) {
                $("#@(clientId + "value") input").val("0");
            },
            onComplete: function (id, name, responseJSON, xhr) {
                if (responseJSON.success) {
                    $("#@(clientId + "value") input").val(responseJSON.pictureId);
                }
            }
        },
        validation: {
            //allowedExtensions: ['jpeg', 'jpg', 'txt'],
            //itemLimit: 3,
            sizeLimit: 10485760,// 10mb,
            allowedExtensions: [@Html.Raw(extensions)]
        }
    });

</script>

@if (Model > 0)
{
<script>
    var @(clientId)fileObj = @Html.Raw(Json.Serialize(picture));
    console.log(@Html.Raw(Json.Serialize(picture)))
    var @(clientId)stringArray = [];
    @(clientId)stringArray.push(@(clientId)fileObj);

    @(clientId)Uploader.addInitialFiles(@(clientId)stringArray);

</script>
}